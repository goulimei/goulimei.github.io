<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Limei&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Limei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Mar 2019 10:32:05 +1100</lastBuildDate>
    
	<atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Russian Box</title>
      <link>http://localhost:1313/posts/russian-box/</link>
      <pubDate>Sun, 17 Mar 2019 10:32:05 +1100</pubDate>
      
      <guid>http://localhost:1313/posts/russian-box/</guid>
      <description> 介绍  向左键、向右键，控制左右； 向上键，控制旋转；向下键，控制加速；空格键，暂停；Enter键，继续。 初始化30X30的游戏主界面，和7种图形数据结构； localStorage存储最高分数； 没有实现webSocket，暂时不能联机对战；  实现过程  设计整体结构； 定义样式，字体大小和颜色等； 游戏主界面canvas组件，由js动态生成； 绘制游戏底图画布canvas; 创建路径，利用for循环，绘制横向网格和纵向网格，关闭路径。根据设置的线宽和颜色，进行绘制。 定义7种模块的数据类型; 利用二维数组存储数据模型，每种模块由4个小方块构成，用参数x,y,color，表示每个方块的位置。 将所有二维网格都设定为0，表示小方块为默认底图画布。 初始化模块，随机得到7种模块的一种。 实现向左、向右、向下移动和旋转的逻辑; 向左向右，考虑边界值，更改小方块数值，表示网格被上色； 向下，考虑是否到底或碰到已有方块，停止移动。若到顶，用localStorage存储当前分数，并更新最大分数； 旋转，按90度逆时针转动。 结果发布界面，通过localStorage获取本地存储中的当前速度，当前分数、最大分数。 增加键盘监听，上下左右键，空格键，回车键。  </description>
    </item>
    
    <item>
      <title>Git Install Noweb</title>
      <link>http://localhost:1313/posts/git-install-offline/</link>
      <pubDate>Sun, 17 Mar 2019 10:26:19 +1100</pubDate>
      
      <guid>http://localhost:1313/posts/git-install-offline/</guid>
      <description>无网络环境下，git源码文件安装 说明
本文针对linux的Redhat系列(FedoraCore,RHEL,CentOS),ubuntu采用apt-get,这里略过。
目前已测试过：
 centos7(kernel-release:3.10.0-229.el7.x86_64);
 中标麒麟3.2(kernel-release：2.6.32-220.7.1.1.ky3.2.x86_64);
 其中centos7自带git版本为:git version 1.8.3.1  1.解压缩git源码文件 tar -xzvf cd git-2.16.2.tar.gz cd git-2.16.2  2.编译git源文件 #### 由于git依赖的库很多,可以先碰运气,安装试试 #### make configure ./configure --prefix=/usr #### 编译所有 #### make all doc #### 若无错误,恭喜你,直接进入步骤3 #### #### 但90%都会报错,例如下面的示例 #### #### sample #### ASCIIDOC git-log.html /bin/sh:行1: asciidoc: 未找到命令 make[1]: *** [git-log.html] 错误 127 make[1]: 离开目录“/home/gis/git-2.16.2/Documentation” make: *** [doc] 错误 2 #### 此时请跳到步骤4,(缺哪个第三方库，编译和安装哪个) #### #### 完成后,再返回步骤2 ####  3.安装git su make install install-doc install-man install-html #### 验证git安装成功 #### git --version git version 2.</description>
    </item>
    
    <item>
      <title>CSS Layout</title>
      <link>http://localhost:1313/posts/css-layout/</link>
      <pubDate>Sun, 17 Mar 2019 10:09:15 +1100</pubDate>
      
      <guid>http://localhost:1313/posts/css-layout/</guid>
      <description>圣杯模型 圣杯模型属于三栏布局，其中左右两列宽度固定，中间宽度自适应且优先展示渲染；在实际应用中，希望左右两边的高度，随中间的高度，自适应。
 通过类选择器，分别对center、left、right设置基础样式;其中left和right宽度固定，center宽度自适应（100%);
 让三个块元素都向左浮动，并利用父容器清除浮动，即通过overflow:hidden,创建BFC防止高度塌陷；
 此时，left排在了center后面，right排在了left后面；
 通过margin属性，将right向左移动left的宽度；
 此时，left和right压盖住了center，需要通过父级元素（padding-left，padding-right）预留出left和right的空间；
 再利用相对定位，使left和right回到预想位置；
  html文件
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;center &amp;lt;p&amp;gt;test height auto&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;test height auto&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;test height auto&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;test height auto&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;left&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;right&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  css文件
.body{ min-width: 630px; } .container{ overflow: hidden; /* 清除浮动 */ padding-left: 100px; /* 为left留出空间 */ padding-right: 200px; /* 为right留出空间 */ } .center{ width: 100%; background-color: #fff144a6; } .left{ width: 100px; background-color: #33ff857a; margin-left: -100%; /* left排在了center后面，需要向左移动center的宽度*/ position: relative; left: -100px; /* 利用相对定位，使left回到预想位置 */ } .</description>
    </item>
    
    <item>
      <title>How to Understand Package JSON</title>
      <link>http://localhost:1313/posts/how-to-understand-package-json/</link>
      <pubDate>Sun, 17 Mar 2019 10:06:45 +1100</pubDate>
      
      <guid>http://localhost:1313/posts/how-to-understand-package-json/</guid>
      <description>package.json文件 对于自定义模块，需要package.json文件，用于描述模块。
好处 1. 方便将项目中的模块分享给他人，通过npm install将依赖的模块下载； 2. 方便记录所依赖模块的版本号，避免依赖模块的新版本与项目不兼容，导致运行不了的情况； 3. 方便通过 npm publish 发布到NPM库，供别人下载使用。  生成package.json文件 ** npm init **
This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help json` for definitive documentation on these fields and exactly what they do. Use `npm install &amp;lt;pkg&amp;gt;` afterwards to install a package and save it as a dependency in the package.</description>
    </item>
    
  </channel>
</rss>